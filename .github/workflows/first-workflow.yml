name: Deploy Project
on:
  push:
    branches:
      - 'dev'
      - 'main'
      - 'test'
      - '!production'
    
jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          node -v
          ls -lah
          
      - name: Checkout / Get Code
        uses: actions/checkout@v3
      
      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installing Dependencies
        run: npm ci

      - name: Running Testing
        run : npm test
        
      - name: Check list all files after testing
        run: |
          ls -lah

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 3
    outputs:
      output_file: ${{ steps.publish-id.outputs.output_file}}
    steps:
      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          cat /etc/os-release
          hostnamectl
          docker version
      
      - name: Checkout / Get Code
        uses: actions/checkout@v3
      
      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installing Dependencies
        run: npm ci
      
      - name: Build Project
        run: npm run build

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/
            package.json

      - name: Output Content
        run: ls -a

      - name: publish JS filename
        id : publish-id
        run: find dist/assets/*.js -type f -execdir echo 'output_file={}' >>  $GITHUB_OUTPUT ';'

  deploy:
    name: Deploy Jobs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Output Content before getting artifact
        run: ls -a
      
      - name: Getting Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
      - name: output filename from build jobs
        run: echo  "${{ needs.build.outputs.output_file}}"
        
      - name: Output Content after getting artifact
        run: ls -a

      - name: Execute deploy job
        run: |
          echo "Deploying jobs ..."
          echo "done."

