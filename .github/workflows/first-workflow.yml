name: Deploy Project
on:
  push:
    branches:
      - 'dev'
      - 'main'
      - 'test'
      - '!production'
    
jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 3
    steps:
      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          node -v
          ls -lah
          
      - name: Checkout / Get Code
        uses: actions/checkout@v3
      
      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: "npm"

      - name: using cache for Node
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules/
          key: deps-node-${{ hashFiles('**/package-lock.json') }}

      - name: Installing Dependencies
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: npm ci

      - name: Running Testing
        id: run-test
        run : npm test
      
      - name: Upload test report
        if: ${{ failure() && steps.run-test.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: index.html

      - name: Check list all files after testing
        if: ${{ always() }}
        run: |
          ls -lah
          echo "steps executed even run-test failed"
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    timeout-minutes: 3
    outputs:
      output_file: ${{ steps.publish-id.outputs.output_file}}
      output_file2: ${{ steps.publish-id.outputs.asik }}
    steps:
      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          cat /etc/os-release
          hostnamectl
          docker version
      
      - name: Checkout / Get Code
        uses: actions/checkout@v3
      
      - name: Installing Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: using cache for Node
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules/
          key: deps-node-${{ hashFiles('**/package-lock.json') }}
  
      - name: Installing Dependencies
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: npm ci
      
      - name: Build Project
        run: npm run build

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/
            package.json

      - name: Output Content
        run: ls -a

      - name: publish JS filename
        id : publish-id
        run: |
          find dist/assets/*.js -type f -execdir echo 'output_file={}' >>  $GITHUB_OUTPUT ';'
          echo 'asik=$(date +'%Y-%m-%dT%H%M%S')' >> $GITHUB_OUTPUT

      - name: Testing file
        run: |
          echo "ini adalah hasil dari publish-id output 1:${{ steps.publish-id.outputs.output_file}}"
          echo "ini hasil kedua, tanggal: ${{ steps.publish-id.outputs.asik }}"

      - name: testing using format
        run: |
          echo "${{ format('{0}', (github.ref == 'refs/heads/test' && vars.ASIK)) }}"

      - name: Testing using slug
        uses: rlespinasse/github-slug-action@v4

      - name: Output
        run: |
          echo "Partial variables"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART }}"
          echo "Slug variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG }}"
          echo "Slug URL variables"
          echo "   repository          : ${{ env.GITHUB_REPOSITORY_SLUG_URL }}"
          echo "   repository owner    : ${{ env.GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"
          echo "   repository name     : ${{ env.GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"
          echo "   ref                 : ${{ env.GITHUB_REF_SLUG_URL }}"
          echo "   head ref            : ${{ env.GITHUB_HEAD_REF_SLUG_URL }}"
          echo "   base ref            : ${{ env.GITHUB_BASE_REF_SLUG_URL }}"
          echo "   event ref           : ${{ env.GITHUB_EVENT_REF_SLUG_URL }}"
          echo "Short SHA variables"
          echo "   sha                 : ${{ env.GITHUB_SHA_SHORT }}"
          echo "   pull request sha    : ${{ env.GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"

          echo "Asli"
          echo "Hasil ${{ github.ref }}"
          echo "Hasil $GITHUB_REF"
   

  deploy:
    name: Deploy Jobs
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Output Content before getting artifact
        run: ls -a
      
      - name: Getting Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
      - name: output filename from build jobs
        run: |
          echo  "${{ needs.build.outputs.output_file}}"
          echo "new output: ${{ needs.build.outputs.output_file2 }}"
        
      - name: Output Content after getting artifact
        run: ls -a

      - name: Execute deploy job
        run: |
          echo "Deploying jobs ..."
          echo "done."

  report:
    name: report job
    needs: 
      - deploy
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: report job
        run: |
          echo "something gone wrong"
          echo "${{ toJson(github) }}"
          echo "report job will executed if any jobs failed"
