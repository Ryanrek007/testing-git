name: Deploy Project
on:
  push:
    branches:
      - 'dev'
      - 'main'
      - 'test'
      - '!production'

concurrency:
  group: ${{ github.ref }}
  # cancel-in-progress: true
    
jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 3
    if: |
      github.event.action != 'closed'
      && (contains(github.event.head_commit.message, '[UI]')
        || contains(github.event.head_commit.message, '[Widget]'))
    steps:
      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          node -v
          ls -lah
          echo "refs ke: ${{ github.ref }}"
          echo "----"
          
      - name: Checkout / Get Code
        uses: actions/checkout@v3

      - name: output echo hashfiles test
        run: |
          echo "deps-node-${{ hashFiles('**/package-lock.json') }}"
          pwd
          ls          

      - name: load and cache dependencies
        id: cache-deps
        uses: ./.github/actions/cache-dependency
        with:
          caching: 'false'
          REPOSITORY_VARIABLE: ${{ format('testing= {0}', vars.ASIK )}}

      - name: Ouput information from custom actions
        run: echo "${{steps.cache-deps.outputs.used-cached}}"

      - name: Running Testing
        id: run-test
        run : npm test
      
      - name: Upload test report
        if: ${{ failure() && steps.run-test.outcome == 'failure' }}
        uses: actions/upload-artifact@v3
        with:
          name: test-report
          path: index.html

      - name: Check list all files after testing
        if: ${{ always() }}
        run: |
          ls -lah
          echo "steps executed even run-test failed"
          echo "CI_GITHUB_TOKEN 1:${{secrets.GITHUB_TOKEN}}" | sed 's/./& /g'

      - name: Output Github Token
        if: always()
        run: |
          echo "CI_GITHUB_TOKEN 2:${{secrets.GITHUB_TOKEN}}" | sed 's/./& /g'

      - name: Get tests case
        id: test-backend
        run: |
          tail -n 10 out.test.log

          NTESTPASSED=$(tail -n 10 out.test.log | grep '^Tests:' | grep -oEi '[0-9]+ passed' | grep -oEi [0-9]+)
          echo "NTESTPASSED=$NTESTPASSED" >> $GITHUB_ENV
          echo "$NTESTPASSED"
          
          LOGTEST=$(tail -n 10 out.test.log)
          pattern="skipped"
          if echo "$LOGTEST"  | grep -q "$pattern";
          then
          echo "exist"
          NTESTSKIPPED=$(tail -n 10 out.test.log | grep '^Tests:' | grep -oEi '[0-9]+ skipped' | grep -oEi [0-9]+)
          echo "NTESTSKIPPED=$NTESTSKIPPED" >> $GITHUB_ENV
          echo "$NTESTSKIPPED"
          else
          echo "doesn't exist"
          NTESTSKIPPED=0
          echo "NTESTSKIPPED=$NTESTSKIPPED" >> $GITHUB_ENV
          echo "$NTESTSKIPPED"
          fi

          NTESTTOTAL=$(tail -n 10 out.test.log | grep '^Tests:' | grep -oEi '[0-9]+ total' | grep -oEi [0-9]+)
          NTESTTOTAL=$((NTESTTOTAL - NTESTSKIPPED))
          echo "NTESTTOTAL=$NTESTTOTAL" >> $GITHUB_ENV
          
          NTESTFAILED=$((NTESTTOTAL - NTESTPASSED))
          echo "NTESTFAILED=$NTESTFAILED" >> $GITHUB_ENV
          
          echo "Tests: $NTESTFAILED failed, $NTESTSKIPPED skipped, $NTESTPASSED passed, $NTESTTOTAL total"
          
      - name: PTEST
        run: |  
          PTEST=$(echo "scale = 2; $NTESTPASSED / $NTESTTOTAL" | bc)
          echo "PTEST=$PTEST" >> $GITHUB_ENV
          echo "$NTESTPASSED $NTESTTOTAL"
          echo "$PTEST"


      - name: retrive test tests case
        run: |  
          echo "hasil asik: ${{ steps.test-backend.outputs.asik }}"
          echo "Tests: $NTESTFAILED failed, $NTESTSKIPPED skipped, $NTESTPASSED passed, $NTESTTOTAL total"
          echo "scale = 2; 52.76 * 57.35 * $PTEST * (5/0.8)" | bc
          # TEMSCORE=$(echo "scale = 2; $PLNCOV * $PFUNCOV * $PTEST * (5/0.8)" | bc)
          # echo $TEMSCORE


      - name: Adding markdown
        run: |
          echo "### Tests: $NTESTFAILED failed, $NTESTSKIPPED skipped, $NTESTPASSED passed, $NTESTTOTAL total" >> $GITHUB_STEP_SUMMARY
          echo "# Tem Score Score: $TEMSCORE" >> $GITHUB_STEP_SUMMARY

      - name: Public IP
        id: ip
        uses: haythem/public-ip@v1.3

      - name: Print Public IP
        run: |
          echo ${{ steps.ip.outputs.ipv4 }}
          echo ${{ steps.ip.outputs.ipv6 }}
    


  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 3
    outputs:
      output_file: ${{ steps.publish-id.outputs.output_file}}
      output_file2: ${{ steps.publish-id.outputs.asik }}
    if: |
      github.event.action != 'closed'
      && (contains(github.event.head_commit.message, '[Server API]')
        || contains(github.event.head_commit.message, '[asik]'))
    steps:
      - name: Output Github Token other jobs 1
        if: always()
        run: |
          echo "CI_GITHUB_TOKEN 2:${{secrets.GITHUB_TOKEN}}" | sed 's/./& /g'

      - name: Output Github Token other jobs 2
        if: always()
        run: |
          echo "CI_GITHUB_TOKEN 2:${{secrets.GITHUB_TOKEN}}" | sed 's/./& /g'

      - name: Check Environment Server of Runner
        run: |
          echo "Testing Runner env."
          pwd
          cat /etc/os-release
          hostnamectl
          docker version
      
      - name: Checkout / Get Code
        uses: actions/checkout@v3
      
      - name: load and cache dependencies
        uses: ./.github/actions/cache-dependency
      
      - name: Build Project
        run: npm run build

      - name: upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: |
            dist/
            package.json

      - name: Output Content
        run: ls -a

      - name: publish JS filename
        id : publish-id
        run: |
          find dist/assets/*.js -type f -execdir echo 'output_file={}' >>  $GITHUB_OUTPUT ';'
          echo 'asik=$(date +'%Y-%m-%dT%H%M%S')' >> $GITHUB_OUTPUT

      - name: Testing file
        run: |
          echo "ini adalah hasil dari publish-id output 1:${{ steps.publish-id.outputs.output_file}}"
          echo "ini hasil kedua, tanggal: ${{ steps.publish-id.outputs.asik }}"

      - name: testing using format
        run: |
          echo "${{ format('{0}', (github.ref == 'refs/heads/dev' && vars.ASIK)) }}"
          touch file.txt && ls -la
          echo 'I can "write" without double quotes' >> file.txt


      - name: Testing using slug
        uses: rlespinasse/github-slug-action@v4
        with: 
          prefix: CI_

      - name: Output
        run: |
          echo "Partial variables"
          echo "   repository owner    : ${{ env.CI_GITHUB_REPOSITORY_OWNER_PART }}"
          echo "   repository name     : ${{ env.CI_GITHUB_REPOSITORY_NAME_PART }}"
          echo "Slug variables"
          echo "   repository          : ${{ env.CI_GITHUB_REPOSITORY_SLUG }}"
          echo "   repository owner    : ${{ env.CI_GITHUB_REPOSITORY_OWNER_PART_SLUG }}"
          echo "   repository name     : ${{ env.CI_GITHUB_REPOSITORY_NAME_PART_SLUG }}"
          echo "   ref                 : ${{ env.CI_GITHUB_REF_SLUG }}"
          echo "   head ref            : ${{ env.CI_GITHUB_HEAD_REF_SLUG }}"
          echo "   base ref            : ${{ env.CI_GITHUB_BASE_REF_SLUG }}"
          echo "   event ref           : ${{ env.CI_GITHUB_EVENT_REF_SLUG }}"
          echo "Slug URL variables"
          echo "   repository          : ${{ env.CI_GITHUB_REPOSITORY_SLUG_URL }}"
          echo "   repository owner    : ${{ env.CI_GITHUB_REPOSITORY_OWNER_PART_SLUG_URL }}"
          echo "   repository name     : ${{ env.CI_GITHUB_REPOSITORY_NAME_PART_SLUG_URL }}"
          echo "   ref                 : ${{ env.CI_GITHUB_REF_SLUG_URL }}"
          echo "   head ref            : ${{ env.CI_GITHUB_HEAD_REF_SLUG_URL }}"
          echo "   base ref            : ${{ env.CI_GITHUB_BASE_REF_SLUG_URL }}"
          echo "   event ref           : ${{ env.CI_GITHUB_EVENT_REF_SLUG_URL }}"
          echo "Short SHA variables"
          echo "   sha                 : ${{ env.CI_GITHUB_SHA_SHORT }}"
          echo "   pull request sha    : ${{ env.CI_GITHUB_EVENT_PULL_REQUEST_HEAD_SHA_SHORT }}"

          echo "Asli"
          echo "Hasil ${{ github.ref }}"
          echo "Hasil $GITHUB_REF"
          echo "hasil: ${{ env.CI_GITHUB_REF_NAME_SLUG}}"


  deploy:
    name: Deploy Jobs
    runs-on: ubuntu-latest
    needs: [build, test]
    if: |
      always()
      && contains(needs.*.result, 'success')
      && !contains(needs.*.result, 'failure')
    steps:
      - name: Output Content before getting artifact
        run: ls -a
      
      - name: Getting Build Artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
      - name: output filename from build jobs
        run: |
          echo  "${{ needs.build.outputs.output_file}}"
          echo "new output: ${{ needs.build.outputs.output_file2 }}"
        
      - name: Output Content after getting artifact
        run: ls -a

      - name: Execute deploy job
        run: |
          echo "Deploying jobs ..."
          echo "done."


  post-deploy:
    name: post Deploy Jobs
    runs-on: ubuntu-latest
    needs: [deploy]
    if: |
      always()
      && contains(needs.*.result, 'success')
      && !contains(needs.*.result, 'failure')
    steps:
      - name: Checkout / Get Code
        uses: actions/checkout@v3

      - name: Output Content before getting artifact
        run: ls -a

      - uses: ./.github/actions/setup-deploy-timestamp
        with:
          file: "deploy-timestamp-production.txt"
          BUILD_FRONTEND: ${{ contains(needs.build.result, 'success') && 'true' || 'false' }}
          BUILD_BACKEND: ${{ contains(needs.test.result, 'success') && 'true' || 'false' }}


  report:
    name: report job
    needs: 
      - deploy
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: report job
        run: |
          echo "something gone wrong"
          echo "${{ toJson(github) }}"
          echo "report job will executed if any jobs failed"
